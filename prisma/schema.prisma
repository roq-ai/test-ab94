generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model administrator {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String?       @db.Uuid
  organization_id String?       @db.Uuid
  role            String?       @db.VarChar(255)
  status          String?       @db.VarChar(255)
  start_date      DateTime?     @db.Date
  end_date        DateTime?     @db.Date
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user?         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model holding {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id String?       @db.Uuid
  stock_id        String?       @db.Uuid
  purchase_price  Int?
  purchase_date   DateTime?     @db.Date
  quantity        Int?
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stock           stock?        @relation(fields: [stock_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transaction     transaction[]
}

model organization {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description   String?         @db.VarChar(255)
  address       String?         @db.VarChar(255)
  city          String?         @db.VarChar(255)
  country       String?         @db.VarChar(255)
  name          String          @db.VarChar(255)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  user_id       String          @db.Uuid
  tenant_id     String          @db.VarChar(255)
  administrator administrator[]
  holding       holding[]
  user          user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model stock {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @db.VarChar(255)
  ticker_symbol String    @db.VarChar(10)
  market        String    @db.VarChar(255)
  price         Int?
  quantity      Int?
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  updated_at    DateTime  @default(now()) @db.Timestamp(6)
  holding       holding[]
}

model transaction {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  holding_id        String?   @db.Uuid
  user_id           String?   @db.Uuid
  transaction_type  String?   @db.VarChar(10)
  transaction_date  DateTime? @db.Date
  transaction_price Int?
  quantity          Int?
  created_at        DateTime  @default(now()) @db.Timestamp(6)
  updated_at        DateTime  @default(now()) @db.Timestamp(6)
  holding           holding?  @relation(fields: [holding_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              user?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String          @unique @db.VarChar(255)
  firstName     String?         @db.VarChar(255)
  lastName      String?         @db.VarChar(255)
  roq_user_id   String          @db.VarChar(255)
  tenant_id     String          @db.VarChar(255)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  administrator administrator[]
  organization  organization[]
  transaction   transaction[]
}
